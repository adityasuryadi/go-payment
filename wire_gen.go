// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/google/wire"
	"payment/config"
	"payment/controller"
	"payment/exception"
	"payment/repository"
	"payment/service"
)

// Injectors from injector.go:

func InitializeApp(filenames ...string) *fiber.App {
	configConfig := config.New(filenames...)
	db := config.NewPostgresDB(configConfig)
	paymentRepository := repository.NewPaymentRepository(db)
	faspayService := service.NewFaspayService()
	pointRespository := repository.NewPointRepository(db)
	midtransPayment := config.NewMidtransPayment(configConfig)
	paymentService := service.NewPaymentService(paymentRepository, db, faspayService, pointRespository, midtransPayment)
	paymentController := controller.NewPaymentController(paymentService)
	app := NewServer(paymentController)
	return app
}

// injector.go:

var (
	paymentSet = wire.NewSet(repository.NewPaymentRepository, service.NewPaymentService, service.NewFaspayService, controller.NewPaymentController, repository.NewPointRepository)
)

func NewServer(paymentController controller.PaymentController) *fiber.App {
	app := fiber.New(fiber.Config{ErrorHandler: exception.ErrorHandler})
	app.Use(cors.New(cors.Config{
		AllowHeaders:     "*",
		AllowOrigins:     "*",
		AllowCredentials: true,
		AllowMethods:     "GET,POST,HEAD,PUT,DELETE,PATCH,OPTIONS",
	}))
	paymentController.Route(app)
	return app
}
